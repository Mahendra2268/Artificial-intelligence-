import heapq

class PuzzleNode:
    def __init__(self, state, parent=None, move=None, depth=0):
        self.state = state
        self.parent = parent
        self.move = move
        self.depth = depth
        self.score = self.depth + self.heuristic()

    def __lt__(self, other):
        return self.score < other.score

    def __eq__(self, other):
        return self.state == other.state

    def __hash__(self):
        return hash(str(self.state))

    def heuristic(self):
        # Manhattan distance heuristic
        h = 0
        goal_state = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]
        for i in range(3):
            for j in range(3):
                if self.state[i][j] != 0:
                    goal_row, goal_col = divmod(self.state[i][j] - 1, 3)
                    h += abs(i - goal_row) + abs(j - goal_col)
        return h

    def get_neighbors(self):
        neighbors = []
        zero_row, zero_col = self.find_zero()
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        for drow, dcol in directions:
            new_row, new_col = zero_row + drow, zero_col + dcol
            if 0 <= new_row < 3 and 0 <= new_col < 3:
                new_state = [row[:] for row in self.state]
                new_state[zero_row][zero_col], new_state[new_row][new_col] = new_state[new_row][new_col], 0
                neighbors.append(PuzzleNode(new_state, parent=self, move=(drow, dcol), depth=self.depth + 1))
        return neighbors

    def find_zero(self):
        for i in range(3):
            for j in range(3):
                if self.state[i][j] == 0:
                    return i, j

    def print_path(self):
        path = []
        current = self
        while current:
            path.append(current.state)
            current = current.parent
        path.reverse()
        for state in path:
            print_state(state)

def print_state(state):
    for row in state:
        print(row)
    print()

def solve_puzzle(initial_state):
    initial_node = PuzzleNode(initial_state)
    if is_solvable(initial_state):
        frontier = [initial_node]
        explored = set()
        while frontier:
            current_node = heapq.heappop(frontier)
            if current_node.state == [[0, 1, 2], [3, 4, 5], [6, 7, 8]]:
                current_node.print_path()
                return
            explored.add(current_node)
            for neighbor in current_node.get_neighbors():
                if neighbor not in explored and neighbor not in frontier:
                    heapq.heappush(frontier, neighbor)
                elif neighbor in frontier:
                    frontier_node = frontier[frontier.index(neighbor)]
                    if neighbor.depth < frontier_node.depth:
                        frontier[frontier.index(neighbor)] = neighbor
        print("No solution found.")
    else:
        print("The puzzle is not solvable.")

def is_solvable(state):
    inversion_count = 0
    flattened_state = [num for row in state for num in row if num != 0]
    for i in range(len(flattened_state)):
        for j in range(i + 1, len(flattened_state)):
            if flattened_state[i] > flattened_state[j]:
                inversion_count += 1
    return inversion_count % 2 == 0

# Example usage:
initial_state = [[1, 2, 3], [4, 5, 6], [0, 7, 8]]
solve_puzzle(initial_state)
